{"version":3,"sources":["components/Result.js","components/Autocomplete.js","services/fetch.js","components/App.js","index.js"],"names":["Result","props","className","drug1","drug2","result","onClick","showDetails","detailsAreHidden","details","Autocomplete","selectAnOption","ev","console","log","target","id","dataset","name","suggestionsDrug","map","item","index","key","data-name","fetchCIMA","query","fetch","then","response","json","App","onSubmit","preventDefault","getComponent","state","query1","query2","suggestionsDrug1","suggestionsDrug2","getSuggestions","bind","getInputValue","debounce","callServer","getResults","event","value","this","setState","data","resultados","fn","time","timeOutId","clearTimeout","context","args","arguments","setTimeout","apply","suggestions","i","length","push","nombre","field","vtm","interactions","ingredient","affectedComponents","affected_ingredient","comp","severity","description","prevState","Fragment","type","onChange","autoComplete","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09646f22.chunk.js","sourcesContent":["import React from 'react';\n\nconst Result = props => {\n    const showDetails = () => {\nprops.showDetails()\n    }\n    return (\n        <section className='result-container'>\n            <span className='result-container__message'> interacción entre componentes <b>{props.drug1}</b> y <b>{props.drug2}</b></span>\n            <p className='result-container__txt'>Riesgo: {props.result}</p>\n            <button className='result-container__btn' onClick={showDetails}>Más información</button>\n            <p className={`result-container__details ${props.detailsAreHidden ? 'hidden': null}`}>{props.details}</p>\n        </section>\n    )\n}\nexport default Result;\n","import React from 'react';\n\nconst Autocomplete = props => {\n    const selectAnOption = ev => {        \n        console.log(ev.target.id);\n        \n        props.selectAnOption(ev.target.dataset.name, ev.target.id)\n    }\n    return (\n        <ul className={props.suggestionsDrug ? 'autocomplete' : 'hidden'}>\n            {!props.suggestionsDrug ? true : props.suggestionsDrug.map((item, index) => {\n            return <li key={index} onClick={selectAnOption} data-name={props.name} id={item}>{item}</li>\n          })}\n        </ul>\n    )\n}\nexport default Autocomplete;","const CIMA = 'https://cima.aemps.es/cima/rest/medicamentos?nombre=';\n\nconst fetchCIMA = query => fetch(CIMA+query).then(response => response.json());\n\n\nexport { fetchCIMA };","import React from 'react';\nimport '../stylesheets/App.scss';\nimport Result from './Result';\nimport Autocomplete from './Autocomplete';\nimport {fetchCIMA} from '../services/fetch'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query1: '',\n      query2: '',\n      drug1: '',\n      drug2: '',\n      result: '',\n      suggestionsDrug1: [],\n      suggestionsDrug2: [],\n      details: '',\n      detailsAreHidden: true\n    }\n    this.getSuggestions = this.getSuggestions.bind(this);\n    this.getInputValue = this.getInputValue.bind(this);\n    this.fetchCIMA = this.debounce(this.fetchCIMA, 500);\n    this.selectAnOption = this.selectAnOption.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.getComponent = this.getComponent.bind(this);\n    this.callServer = this.callServer.bind(this);\n    this.getResults = this.getResults.bind(this);\n    this.showDetails = this.showDetails.bind(this);\n  }\n  \n  getInputValue(event){\n    let name = event.target.name;\n    let value = event.target.value;\n    this.setState({\n      [name]: value\n    })\n    this.fetchCIMA(name, value)\n  }\n  fetchCIMA (name, value){\n    fetchCIMA(value)\n    .then(data => this.getSuggestions(name, data.resultados))\n  }\n  debounce (fn, time){\n    let timeOutId\n    return function(){\n      if(timeOutId){\n        clearTimeout(timeOutId)\n      }\n      const context = this\n      const args = arguments\n      timeOutId = setTimeout(() => {\n        fn.apply(context, args)\n      }, time)\n    }\n  }\n  getSuggestions(name, data){\n    let suggestions = []\n    for(let i = 0; i<data.length; i++){\n      suggestions.push(data[i].nombre)\n    }\n    if (name==='query1'){\n      this.setState({suggestionsDrug1: suggestions})\n    } else {\n      this.setState({suggestionsDrug2: suggestions})\n    }\n  }\n  selectAnOption(field, value){\n    field==='query1' ? this.setState({query1: value, suggestionsDrug1: []}) : this.setState({query2: value, suggestionsDrug2: []});\n  }\n  onSubmit = ev => {\n    ev.preventDefault();\n    this.getComponent()\n  }\n  async getComponent() {\n    let drug1 = await fetchCIMA(this.state.query1).then(data => data.resultados[0].vtm.nombre);\n    let drug2 = await fetchCIMA(this.state.query2).then(data => {return data.resultados[0].vtm.nombre});\n    this.setState({\n      drug1: drug1,\n      drug2: drug2\n    })\n    this.callServer()\n  }\n  callServer(){\n    fetch('./data/interactions.json')\n    .then(response => response.json())\n    .then(data => this.getResults(data.interactions))\n  }\n  getResults(data){\n    for (const item of data){\n      if (item.ingredient === this.state.drug1){\n        let selectedComponent = item;\n        let affectedComponents = selectedComponent.affected_ingredient;\n        for (const comp of affectedComponents){\n          if(comp.name === this.state.drug2){\n            this.setState({\n              result: comp.severity,\n              details: comp.description\n            })\n            break;\n          } else {\n            this.setState({\n              result: 'no hay info',\n              details: 'no hay info'\n            })\n          }\n        }\n      }\n    }\n  }\n  showDetails () {\n    this.setState(prevState => {\n      return {\n        detailsAreHidden: !prevState.detailsAreHidden\n      }\n    })\n  }\n\n  render() {\n    const {suggestionsDrug1, suggestionsDrug2, result, details, detailsAreHidden} = this.state;\n    console.log(this.state.query1);\n    console.log(this.state.query2);\n    console.log(this.state.drug1);\n    return (\n      <React.Fragment>\n        <header></header>\n        <main className='main'>\n          <form className='form' onSubmit={this.onSubmit}>\n            <label className='label'>Introduzca los nombres de los medicamentos</label>\n            <input\n            className='input'\n            type='text'\n            name='query1'\n            value={this.state.query1}\n            onChange={this.getInputValue}\n            autoComplete=\"off\"\n            />\n            {suggestionsDrug1.length>0 ? \n            <Autocomplete suggestionsDrug = {suggestionsDrug1} name='query1' selectAnOption={this.selectAnOption}/>\n            : null}\n            <input\n            className='input'\n            type='text'\n            name='query2'\n            value={this.state.query2}\n            onChange={this.getInputValue}\n            autoComplete=\"off\"\n            />\n            {suggestionsDrug2.length>0 ? \n            <Autocomplete suggestionsDrug = {suggestionsDrug2} name='query2' selectAnOption={this.selectAnOption}/> \n            : null}\n            <button\n            className='btn'\n            type='submit'>\n              Buscar\n            </button>\n          </form>\n          {result ? \n          <Result result={result}\n          drug1={this.state.drug1}\n          drug2={this.state.drug2}\n          details={details}\n          showDetails={this.showDetails}\n          detailsAreHidden={detailsAreHidden}\n          /> : null}\n        </main>\n        <footer></footer>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './stylesheets/index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}